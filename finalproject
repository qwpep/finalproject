// Function to calculate the total amount from a vector of Records
double calculateTotal(const vector<Record> &records)
{
    double total = 0;
    for (const auto &record : records)
    {
        total += record.amount;
    }
    return total;
}

// Function to calculate and display a summary of incomes, expenses, and saving goals
void calculateSummary(const vector<Record> &incomes, const vector<Record> &expenses, const vector<Record> &savingGoals)
{
    double totalIncomes = calculateTotal(incomes);
    double totalExpenses = calculateTotal(expenses);
    double totalSavingGoals = calculateTotal(savingGoals);
    double remainingAmountWithSG = totalIncomes - totalExpenses - totalSavingGoals;
    double remainingAmount = totalIncomes - totalExpenses;

    cout << "Total Incomes: $" << totalIncomes << endl;
    cout << "Total Expenses: $" << totalExpenses << endl;
    cout << "Total Saving Goals: $" << totalSavingGoals << endl;
    cout << "Remaining Amount with Saving Goals: $" << remainingAmountWithSG << endl;
    cout << "Remaining Amount: $" << remainingAmount << endl;
}

// Main function
int main()
{
    // Load records from files into vectors
    vector<Record> incomes = loadRecords("incomes.txt");
    vector<Record> expenses = loadRecords("expenses.txt");
    vector<Record> savingGoals = loadRecords("savingGoals.txt");

    // Main loop for the menu
    bool running = true;
    while (running)
    {
        // Display menu options
        cout << "\n======== MENU ========\n"
                "1. Add Income\n"
                "2. Add Expense\n"
                "3. Add Saving Goals\n"
                "4. View Incomes\n"
                "5. View Expenses\n"
                "6. View Saving Goals\n"
                "7. Update Record\n"
                "8. Delete Record\n"
                "9. Calculate Total\n"
                "10. Exit\n"
                "=======================\n\n";
        cout << "Enter your choice: ";
        int choice;
        cin >> choice;

        switch (choice)
        {
        case 1:
            system("cls");
            addRecord(incomes);
            break;
        case 2:
            system("cls");
            addRecord(expenses);
            break;
        case 3:
            system("cls");
            addRecord(savingGoals);
            break;
        case 4:
            system("cls");
            viewRecords(incomes, "Incomes");
            break;
        case 5:
            system("cls");
            viewRecords(expenses, "Expenses");
            break;
        case 6:
            system("cls");
            viewRecords(savingGoals, "Saving Goals");
            break;
        case 7:
            system("cls");
            selectUpdateRecord(incomes, expenses, savingGoals);
            break;
        case 8:
            system("cls");
            selectDeleteRecord(incomes, expenses, savingGoals);
            break;
        case 9:
            system("cls");
            calculateSummary(incomes, expenses, savingGoals);
            break;
        case 10:
            system("cls");
            saveRecords("incomes.txt", incomes);
            saveRecords("expenses.txt", expenses);
            saveRecords("savingGoals.txt", savingGoals);
            cout << "Exiting program." << endl;
            running = false;
            break;
        default:
            system("cls");
            cerr << "Invalid choice. Please try again." << endl;
            cin.clear();
            cin.ignore(numeric_limits<int>::max(), '\n');
            break;
        }
    }

    return 0;
}
